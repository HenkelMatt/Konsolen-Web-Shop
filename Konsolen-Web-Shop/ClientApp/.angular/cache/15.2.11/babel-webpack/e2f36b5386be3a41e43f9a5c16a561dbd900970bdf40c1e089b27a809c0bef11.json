{"ast":null,"code":"import { NavigationStart } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AlertService {\n  constructor(router) {\n    this.router = router;\n    this.subject = new Subject();\n    this.keepAfterRouteChange = false;\n    // clear alert messages on route change unless 'keepAfterRouteChange' flag is true\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationStart) {\n        if (this.keepAfterRouteChange) {\n          // only keep for a single route change\n          this.keepAfterRouteChange = false;\n        } else {\n          // clear alert message\n          this.clear();\n        }\n      }\n    });\n  }\n  getAlert() {\n    return this.subject.asObservable();\n  }\n  success(message, keepAfterRouteChange = false) {\n    this.keepAfterRouteChange = keepAfterRouteChange;\n    this.subject.next({\n      type: 'success',\n      text: message\n    });\n  }\n  error(message, keepAfterRouteChange = false) {\n    this.keepAfterRouteChange = keepAfterRouteChange;\n    this.subject.next({\n      type: 'error',\n      text: message\n    });\n  }\n  clear() {\n    // clear by calling subject.next() without parameters\n    // this.subject.next();\n  }\n  static #_ = this.ɵfac = function AlertService_Factory(t) {\n    return new (t || AlertService)(i0.ɵɵinject(i1.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlertService,\n    factory: AlertService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAiBA,eAAe,QAAQ,iBAAiB;AACzD,SAAqBC,OAAO,QAAQ,MAAM;;;AAG1C,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;IAHlB,YAAO,GAAG,IAAIH,OAAO,EAAO;IAC5B,yBAAoB,GAAG,KAAK;IAGlC;IACA,IAAI,CAACG,MAAM,CAACC,MAAM,CAACC,SAAS,CAACC,KAAK,IAAG;MACnC,IAAIA,KAAK,YAAYP,eAAe,EAAE;QACpC,IAAI,IAAI,CAACQ,oBAAoB,EAAE;UAC7B;UACA,IAAI,CAACA,oBAAoB,GAAG,KAAK;SAClC,MAAM;UACL;UACA,IAAI,CAACC,KAAK,EAAE;;;IAGlB,CAAC,CAAC;EACJ;EAEAC,QAAQ;IACN,OAAO,IAAI,CAACC,OAAO,CAACC,YAAY,EAAE;EACpC;EAEAC,OAAO,CAACC,OAAe,EAAEN,oBAAoB,GAAG,KAAK;IACnD,IAAI,CAACA,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACG,OAAO,CAACI,IAAI,CAAC;MAAEC,IAAI,EAAE,SAAS;MAAEC,IAAI,EAAEH;IAAO,CAAE,CAAC;EACvD;EAEAI,KAAK,CAACJ,OAAe,EAAEN,oBAAoB,GAAG,KAAK;IACjD,IAAI,CAACA,oBAAoB,GAAGA,oBAAoB;IAChD,IAAI,CAACG,OAAO,CAACI,IAAI,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,IAAI,EAAEH;IAAO,CAAE,CAAC;EACrD;EAEAL,KAAK;IACH;IACA;EAAA;EACD;qBApCUP,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAiB,SAAZjB,YAAY;IAAAkB,YADC;EAAM","names":["NavigationStart","Subject","AlertService","constructor","router","events","subscribe","event","keepAfterRouteChange","clear","getAlert","subject","asObservable","success","message","next","type","text","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\henkelmatteo\\TF1 IHK TrainingProjekt\\Konsolen-Web-Shop\\Konsolen-Web-Shop\\ClientApp\\src\\app\\_services\\alert.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Router, NavigationStart } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AlertService {\r\n  private subject = new Subject<any>();\r\n  private keepAfterRouteChange = false;\r\n\r\n  constructor(private router: Router) {\r\n    // clear alert messages on route change unless 'keepAfterRouteChange' flag is true\r\n    this.router.events.subscribe(event => {\r\n      if (event instanceof NavigationStart) {\r\n        if (this.keepAfterRouteChange) {\r\n          // only keep for a single route change\r\n          this.keepAfterRouteChange = false;\r\n        } else {\r\n          // clear alert message\r\n          this.clear();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  getAlert(): Observable<any> {\r\n    return this.subject.asObservable();\r\n  }\r\n\r\n  success(message: string, keepAfterRouteChange = false) {\r\n    this.keepAfterRouteChange = keepAfterRouteChange;\r\n    this.subject.next({ type: 'success', text: message });\r\n  }\r\n\r\n  error(message: string, keepAfterRouteChange = false) {\r\n    this.keepAfterRouteChange = keepAfterRouteChange;\r\n    this.subject.next({ type: 'error', text: message });\r\n  }\r\n\r\n  clear() {\r\n    // clear by calling subject.next() without parameters\r\n    // this.subject.next();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}