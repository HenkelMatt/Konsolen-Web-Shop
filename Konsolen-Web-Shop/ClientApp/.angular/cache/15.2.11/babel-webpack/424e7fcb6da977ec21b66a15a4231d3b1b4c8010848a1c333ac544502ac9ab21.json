{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../_services\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Username is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, LoginComponent_div_7_div_1_Template, 2, 0, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.username.errors.required);\n  }\n}\nfunction LoginComponent_div_12_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, LoginComponent_div_12_div_1_Template, 2, 0, \"div\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.password.errors.required);\n  }\n}\nfunction LoginComponent_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 12);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport class LoginComponent {\n  // returnUrl: string;\n  constructor(formBuilder, route, router,\n  //private authenticationService: AuthenticationService,\n  alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.alertService = alertService;\n    // loginForm: FormGroup;\n    this.loading = false;\n    this.submitted = false;\n    // redirect to home if already logged in\n    // if (this.authenticationService.currentUserValue) {\n    //   this.router.navigate(['/']);\n    // }\n  }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n    // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    // this.authenticationService.login(this.f.username.value, this.f.password.value)\n    //   .pipe(first())\n    //   .subscribe(\n    //     data => {\n    //       this.router.navigate([this.returnUrl]);\n    //     },\n    //     error => {\n    //       this.alertService.error(error);\n    //       this.loading = false;\n    //     });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AlertService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 19,\n    vars: 11,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"username\"], [\"type\", \"text\", \"formControlName\", \"username\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"password\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [\"routerLink\", \"/register\", 1, \"btn\", \"btn-link\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n        i0.ɵɵtext(5, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 3);\n        i0.ɵɵtemplate(7, LoginComponent_div_7_Template, 2, 1, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 1)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 6);\n        i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 2, 1, \"div\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 1)(14, \"button\", 7);\n        i0.ɵɵtemplate(15, LoginComponent_span_15_Template, 1, 0, \"span\", 8);\n        i0.ɵɵtext(16, \" Login \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"a\", 9);\n        i0.ɵɵtext(18, \"Register\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, ctx.submitted && ctx.f.username.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.username.errors);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.submitted && ctx.f.password.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.password.errors);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i2.RouterLink],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;ICI7DC,2BAAwC;IAAAA,oCAAoB;IAAAA,iBAAM;;;;;IADpEA,+BAAqE;IACnEA,sEAAkE;IACpEA,iBAAM;;;;IADEA,eAAgC;IAAhCA,wDAAgC;;;;;IAOtCA,2BAAwC;IAAAA,oCAAoB;IAAAA,iBAAM;;;;;IADpEA,+BAAqE;IACnEA,uEAAkE;IACpEA,iBAAM;;;;IADEA,eAAgC;IAAhCA,wDAAgC;;;;;IAKtCA,2BAA2E;;;;;;;;ADVjF,OAAM,MAAOC,cAAc;EAIzB;EAEAC,YACUC,WAAwB,EACxBC,KAAqB,EACrBC,MAAc;EACtB;EACQC,YAA0B;IAJ1B,gBAAW,GAAXH,WAAW;IACX,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IAEN,iBAAY,GAAZC,YAAY;IAVtB;IACA,YAAO,GAAG,KAAK;IACf,cAAS,GAAG,KAAK;IAUf;IACA;IACA;IACA;EACF;;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ;KACnC,CAAC;IAEF;IACA,IAAI,CAACE,SAAS,GAAG,IAAI,CAACT,KAAK,CAACU,QAAQ,CAACC,WAAW,CAAC,WAAW,CAAC,IAAI,GAAG;EACtE;EAEA;EACA,IAAIC,CAAC;IAAK,OAAO,IAAI,CAACR,SAAS,CAACS,QAAQ;EAAE;EAE1CC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB;IACA,IAAI,IAAI,CAACX,SAAS,CAACY,OAAO,EAAE;MAC1B;;IAGF,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;EAAC;qBAnDUpB,cAAc;EAAA;EAAA;UAAdA,cAAc;IAAAqB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCR3B1B,0BAAI;QAAAA,qBAAK;QAAAA,iBAAK;QACdA,+BAAsD;QAAxBA;UAAA,OAAY2B,cAAU;QAAA,EAAC;QACnD3B,8BAAwB;QACAA,wBAAQ;QAAAA,iBAAQ;QACtCA,2BAAkI;QAClIA,+DAEM;QACRA,iBAAM;QACNA,8BAAwB;QACAA,yBAAQ;QAAAA,iBAAQ;QACtCA,4BAAsI;QACtIA,iEAEM;QACRA,iBAAM;QACNA,+BAAwB;QAEpBA,mEAA2E;QAC3EA,wBACF;QAAAA,iBAAS;QACTA,6BAA+C;QAAAA,yBAAQ;QAAAA,iBAAI;;;QApBzDA,eAAuB;QAAvBA,yCAAuB;QAG0CA,eAA4D;QAA5DA,4FAA4D;QACzHA,eAAoC;QAApCA,6DAAoC;QAM6BA,eAA4D;QAA5DA,4FAA4D;QAC7HA,eAAoC;QAApCA,6DAAoC;QAKlCA,eAAoB;QAApBA,sCAAoB;QACnBA,eAAa;QAAbA,kCAAa","names":["Validators","i0","LoginComponent","constructor","formBuilder","route","router","alertService","ngOnInit","loginForm","group","username","required","password","returnUrl","snapshot","queryParams","f","controls","onSubmit","submitted","invalid","loading","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\henkelmatteo\\TF1 IHK TrainingProjekt\\Konsolen-Web-Shop\\Konsolen-Web-Shop\\ClientApp\\src\\app\\components\\Login\\Login.component.ts","C:\\Users\\henkelmatteo\\TF1 IHK TrainingProjekt\\Konsolen-Web-Shop\\Konsolen-Web-Shop\\ClientApp\\src\\app\\components\\Login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AlertService } from '../../_services';\r\n\r\n@Component({templateUrl: 'login.component.html'})\r\nexport class LoginComponent implements OnInit {\r\n  // loginForm: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n  // returnUrl: string;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    //private authenticationService: AuthenticationService,\r\n    private alertService: AlertService\r\n  ) {\r\n    // redirect to home if already logged in\r\n    // if (this.authenticationService.currentUserValue) {\r\n    //   this.router.navigate(['/']);\r\n    // }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.loginForm.controls; }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    // this.authenticationService.login(this.f.username.value, this.f.password.value)\r\n    //   .pipe(first())\r\n    //   .subscribe(\r\n    //     data => {\r\n    //       this.router.navigate([this.returnUrl]);\r\n    //     },\r\n    //     error => {\r\n    //       this.alertService.error(error);\r\n    //       this.loading = false;\r\n    //     });\r\n  }\r\n}\r\n","<h2>Login</h2>\r\n<form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"username\">Username</label>\r\n    <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n    <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n      <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <label for=\"password\">Password</label>\r\n    <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n    <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n      <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n    </div>\r\n  </div>\r\n  <div class=\"form-group\">\r\n    <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n      <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm mr-1\"></span>\r\n      Login\r\n    </button>\r\n    <a routerLink=\"/register\" class=\"btn btn-link\">Register</a>\r\n  </div>\r\n</form>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}