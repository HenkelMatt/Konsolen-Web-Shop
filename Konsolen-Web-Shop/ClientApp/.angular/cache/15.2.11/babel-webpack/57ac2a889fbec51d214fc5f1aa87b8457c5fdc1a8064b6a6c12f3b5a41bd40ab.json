{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, route, router, authenticationService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.authenticationService = authenticationService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitted = false;\n    // redirect to home if already logged in\n    if (this.authenticationService.currentUserValue) {\n      this.router.navigate(['/']);\n    }\n  }\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n    // get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.loginForm.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.authenticationService.login(this.f.username.value, this.f.password.value).pipe(first()).subscribe(data => {\n      this.router.navigate([this.returnUrl]);\n    }, error => {\n      this.alertService.error(error);\n      this.loading = false;\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  templateUrl: 'login.component.html'\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAAiCC,UAAU,QAAQ,gBAAgB;AACnE,SAASC,KAAK,QAAQ,gBAAgB;AAK/B,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAMzBC,YACUC,WAAwB,EACxBC,KAAqB,EACrBC,MAAc,EACdC,qBAA4C,EAC5CC,YAA0B;IAJ1B,gBAAW,GAAXJ,WAAW;IACX,UAAK,GAALC,KAAK;IACL,WAAM,GAANC,MAAM;IACN,0BAAqB,GAArBC,qBAAqB;IACrB,iBAAY,GAAZC,YAAY;IATtB,YAAO,GAAG,KAAK;IACf,cAAS,GAAG,KAAK;IAUf;IACA,IAAI,IAAI,CAACD,qBAAqB,CAACE,gBAAgB,EAAE;MAC/C,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;EAE/B;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACR,WAAW,CAACS,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACe,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACe,QAAQ;KACnC,CAAC;IAEF;IACA,IAAI,CAACE,SAAS,GAAG,IAAI,CAACZ,KAAK,CAACa,QAAQ,CAACC,WAAW,CAAC,WAAW,CAAC,IAAI,GAAG;EACtE;EAEA;EACA,IAAIC,CAAC;IAAK,OAAO,IAAI,CAACR,SAAS,CAACS,QAAQ;EAAE;EAE1CC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB;IACA,IAAI,IAAI,CAACX,SAAS,CAACY,OAAO,EAAE;MAC1B;;IAGF,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAAClB,qBAAqB,CAACmB,KAAK,CAAC,IAAI,CAACN,CAAC,CAACN,QAAQ,CAACa,KAAK,EAAE,IAAI,CAACP,CAAC,CAACJ,QAAQ,CAACW,KAAK,CAAC,CAC3EC,IAAI,CAAC3B,KAAK,EAAE,CAAC,CACb4B,SAAS,CACRC,IAAI,IAAG;MACL,IAAI,CAACxB,MAAM,CAACI,QAAQ,CAAC,CAAC,IAAI,CAACO,SAAS,CAAC,CAAC;IACxC,CAAC,EACDc,KAAK,IAAG;MACN,IAAI,CAACvB,YAAY,CAACuB,KAAK,CAACA,KAAK,CAAC;MAC9B,IAAI,CAACN,OAAO,GAAG,KAAK;IACtB,CAAC,CAAC;EACR;CACD;AApDYvB,cAAc,eAD1BH,SAAS,CAAC;EAACiC,WAAW,EAAE;AAAsB,CAAC,CAAC,GACpC9B,cAAc,CAoD1B;SApDYA,cAAc","names":["Component","Validators","first","LoginComponent","constructor","formBuilder","route","router","authenticationService","alertService","currentUserValue","navigate","ngOnInit","loginForm","group","username","required","password","returnUrl","snapshot","queryParams","f","controls","onSubmit","submitted","invalid","loading","login","value","pipe","subscribe","data","error","templateUrl"],"sourceRoot":"","sources":["C:\\Users\\henkelmatteo\\TF1 IHK TrainingProjekt\\Konsolen-Web-Shop\\Konsolen-Web-Shop\\ClientApp\\src\\app\\components\\Login\\Login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { first } from 'rxjs/operators';\r\n\r\nimport { AlertService, AuthenticationService } from '../../_services';\r\n\r\n@Component({templateUrl: 'login.component.html'})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n  returnUrl: string;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authenticationService: AuthenticationService,\r\n    private alertService: AlertService\r\n  ) {\r\n    // redirect to home if already logged in\r\n    if (this.authenticationService.currentUserValue) {\r\n      this.router.navigate(['/']);\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n\r\n    // get return url from route parameters or default to '/'\r\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n  }\r\n\r\n  // convenience getter for easy access to form fields\r\n  get f() { return this.loginForm.controls; }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n    this.authenticationService.login(this.f.username.value, this.f.password.value)\r\n      .pipe(first())\r\n      .subscribe(\r\n        data => {\r\n          this.router.navigate([this.returnUrl]);\r\n        },\r\n        error => {\r\n          this.alertService.error(error);\r\n          this.loading = false;\r\n        });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}