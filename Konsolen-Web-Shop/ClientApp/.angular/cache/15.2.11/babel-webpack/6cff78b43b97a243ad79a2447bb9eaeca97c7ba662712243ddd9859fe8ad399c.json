{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n//import { User } from '../_models';\nexport class AuthenticationService {\n  constructor(http) {\n    this.http = http;\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(username, password) {\n    return this.http.post(`/users/authenticate`, {\n      username,\n      password\n    }).pipe(map(user => {\n      // login successful if there's a jwt token in the response\n      if (user && user.token) {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n      }\n      return user;\n    }));\n  }\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n  static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAEpC;AAGA,OAAM,MAAOC,qBAAqB;EAIhCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACtB,IAAI,CAACC,kBAAkB,GAAG,IAAIL,eAAe,CAAOM,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;IACpG,IAAI,CAACC,WAAW,GAAG,IAAI,CAACL,kBAAkB,CAACM,YAAY,EAAE;EAC3D;EAEA,IAAWC,gBAAgB;IACzB,OAAO,IAAI,CAACP,kBAAkB,CAACQ,KAAK;EACtC;EAEAC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACZ,IAAI,CAACa,IAAI,CAAM,qBAAqB,EAAE;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CACtEE,IAAI,CAACjB,GAAG,CAACkB,IAAI,IAAG;MACf;MACA,IAAIA,IAAI,IAAIA,IAAI,CAACC,KAAK,EAAE;QACtB;QACAZ,YAAY,CAACa,OAAO,CAAC,aAAa,EAAEf,IAAI,CAACgB,SAAS,CAACH,IAAI,CAAC,CAAC;QACzD,IAAI,CAACd,kBAAkB,CAACkB,IAAI,CAACJ,IAAI,CAAC;;MAGpC,OAAOA,IAAI;IACb,CAAC,CAAC,CAAC;EACP;EAEAK,MAAM;IACJ;IACAhB,YAAY,CAACiB,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACpB,kBAAkB,CAACkB,IAAI,CAAC,IAAI,CAAC;EACpC;EAAC;qBA/BUrB,qBAAqB;EAAA;EAAA;WAArBA,qBAAqB;IAAAwB,SAArBxB,qBAAqB;IAAAyB,YADR;EAAM","names":["BehaviorSubject","map","AuthenticationService","constructor","http","currentUserSubject","JSON","parse","localStorage","getItem","currentUser","asObservable","currentUserValue","value","login","username","password","post","pipe","user","token","setItem","stringify","next","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\henkelmatteo\\TF1 IHK TrainingProjekt\\Konsolen-Web-Shop\\Konsolen-Web-Shop\\ClientApp\\src\\app\\_services\\authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n//import { User } from '../_models';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthenticationService {\r\n  private currentUserSubject: BehaviorSubject<User>;\r\n  public currentUser: Observable<User>;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\r\n    this.currentUser = this.currentUserSubject.asObservable();\r\n  }\r\n\r\n  public get currentUserValue(): User {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  login(username: string, password: string) {\r\n    return this.http.post<any>(`/users/authenticate`, { username, password })\r\n      .pipe(map(user => {\r\n        // login successful if there's a jwt token in the response\r\n        if (user && user.token) {\r\n          // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n          localStorage.setItem('currentUser', JSON.stringify(user));\r\n          this.currentUserSubject.next(user);\r\n        }\r\n\r\n        return user;\r\n      }));\r\n  }\r\n\r\n  logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('currentUser');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}